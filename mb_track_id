#!/opt/local/bin/python2.4

################################################################################
#  Copyright (C) 2002-2007  Travis Shirk <travis@pobox.com>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
################################################################################
import os, sys, math, locale;
import optparse;
from optparse import *;
from eyeD3 import *;
from eyeD3.tag import *;
from eyeD3.frames import *;
from eyeD3.utils import *;
ENCODING = locale.getpreferredencoding();

def getOptionParser():
  versionStr = \
"""mb_track_id - print musicbrainz track uuid for mp3 files
Run with --help/-h for usage information
"""

  usageStr = "%prog [OPTS] file [file...]";
  optParser = OptionParser(usage=usageStr)
  optParser.disable_interspersed_args();

  # Misc. options.
  misc = OptionGroup(optParser, "Misc. Options");
  misc.add_option("--debug", action="store_true", dest="debug",
             help="Trace program execution.");
  optParser.add_option_group(misc);

  return optParser;

class EyeD3Driver:
  def handleFile(self, f):
    self.audioFile = None;
    self.tag = None;

    try:
      if eyeD3.tag.isMp3File(f):
        self.audioFile = eyeD3.tag.Mp3AudioFile(f)
        self.tag = self.audioFile.getTag();
      else:
        self.tag = eyeD3.Tag();
        if not self.tag.link(f, self.opts.tagVersion):
          self.tag = None;
    except (eyeD3.tag.InvalidAudioFormatException,
          eyeD3.tag.TagException, IOError), ex:
      sys.stderr.write(ex + '\n');
      return False

    if not self.tag:
      sys.stderr.write("No ID3 %s tag found!\n" %\
              eyeD3.utils.versionToString(self.opts.tagVersion));

    try:
      self.printTag(self.tag);
    except (UnicodeEncodeError, UnicodeDecodeError), ex:
      sys.stderr.write(ex + '\n');
      return False

    return True

  def printTag(self, tag):
    if isinstance(tag, eyeD3.Tag):
      # UFID
      unique_file_ids = tag.getUniqueFileIDs();
      if unique_file_ids:
         for ufid in unique_file_ids:
            sys.stdout.write("%s [%s] %s\n" % ("Unique File ID:",
                            ufid.owner_id, ufid.id));
    else:
      raise TypeError("Unknown tag type: " + str(type(tag)));

def main():
  (options, args) = getOptionParser().parse_args();
  app = EyeD3Driver()

  retval = 0

  # Process files/directories
  for f in args:
    if os.path.isfile(f):
      retval = app.handleFile(f);
    elif os.path.isdir(f):
      fwalker = FileWalker(app, f);
      retval = fwalker.go();
    else:
      sys.stderr.write("File Not Found: %s\n" % f);
      retval = 1;

  return retval;

#######################################################################
if __name__ == "__main__":
  sys.exit(main())

